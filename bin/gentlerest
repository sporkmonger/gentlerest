#!/usr/bin/env ruby

if RUBY_PLATFORM !~ /mswin/
  # This is a giant, giant hack to make changing process titles with
  # the $0 variable work as expected.
  # If anyone can come up with a method of doing this that doesn't make
  # baby Jesus cry, please let me know.
  $x ||= false
  unless $x then
    # The proc title is currently unpadded.  Pad it.
    ruby = `which ruby`.chomp
    padding = "/padding" * 20 # This number is arbitrary.
    command = "#{ruby} -s #{__FILE__} -x=#{padding} #{ARGV.join(" ")}"
    exec(command)
  end
end

# Note, huge swaths of this file are borrowed from the Rack project.
# End result is an ugly piece of work, but much easier to use and more
# powerful than the rackup command, while still being effectively
# interoperable.  IMHO, YMMV.

$PROFILE = false

# Can't use the locator class here, because we haven't actually loaded
# GentleREST yet.
lib_path = File.expand_path(File.join(File.dirname(__FILE__), "/../lib"))
local_vendor_path = File.expand_path("./vendor")
if File.exists?(File.join(local_vendor_path, "/gentlerest/lib"))
  $:.unshift(File.expand_path(
    File.join(local_vendor_path, "/gentlerest/lib")))
end

$:.unshift(lib_path)
$:.uniq!

require "gentlerest"
require "rubygems"
require "rack"
require "optparse"

command = ARGV.shift

# Default to a development environment
ENV['ENVIRONMENT'] = 'development' if ENV['ENVIRONMENT'] == nil

# Process any environment variables set on the command line
# before we do anything else.
i = 0
loop do
  break if ARGV.empty?
  var = ARGV[i]
  if var =~ /^\w+\=.*$/
    key, value = var.split("=", 2)
    key.upcase!
    ENV[key] = value
    ARGV.delete(var)
  else
    i += 1
  end
  break if i >= ARGV.size
end

automatic = false
server = nil
options = {:Port => 3000, :Host => "0.0.0.0", :AccessLog => []}

opts = OptionParser.new("", 24, '  ') { |opts|
  opts.banner =
    "Usage: gentlerest <command> [ruby options] [rack options] " +
    "[VARIABLE=value]"

  opts.separator ""
  opts.separator "Ruby options:"

  lineno = 1
  opts.on("-e", "--eval LINE", "evaluate a LINE of code") { |line|
    eval(line, TOPLEVEL_BINDING, "-e", lineno)
    lineno += 1
  }

  opts.on("-n", "--name NAME", "select init script NAME") { |name|
    ENV['INIT_SCRIPT'] = name
  }

  opts.on("-d", "--debug", "set debugging flags (set $DEBUG to true)") {
    $DEBUG = true
  }
  
  opts.on("-w", "--warn", "turn warnings on for your script") {
    $-w = true
  }

  opts.on("-I", "--include PATH",
          "specify $LOAD_PATH (may be used more than once)") { |path|
    $LOAD_PATH.unshift(*path.split(":"))
  }

  opts.on("-r", "--require LIBRARY",
          "require the library, before executing your script") { |library|
    require library
  }

  opts.separator ""
  opts.separator "Rack options:"
  opts.on("-s", "--server SERVER", "serve using SERVER") { |s|
    server = s
  }

  opts.on("-o", "--host HOST", "listen on HOST (default: 0.0.0.0)") { |host|
    options[:Host] = host
  }

  opts.on("-p", "--port PORT", "use PORT (default: 9292)") { |port|
    options[:Port] = port
  }

  opts.on("-E", "--env ENVIRONMENT",
      "use ENVIRONMENT for defaults (default: #{ENV['ENVIRONMENT']})") { |e|
    ENV['ENVIRONMENT'] = e
  }

  opts.separator ""
  opts.separator "Available commands:"
  opts.separator ""
  opts.separator "start"
  opts.separator "stop"
  opts.separator "restart"
  opts.separator "profile"
  opts.separator "console"
  opts.separator "create"
  opts.separator "version"
  opts.separator "help"
}

# We haven't parsed options yet, but we absolutely have to
# have access to the script name here.
if ARGV.include?("-n") || ARGV.include?("--name")
  index = ARGV.index("-n")
  index = ARGV.index("--name") if index == nil
  index += 1 if index != nil
  ENV['INIT_SCRIPT'] = ARGV[index]
end

ENV['GENTLE_ROOT'] = GentleREST::Locator.locate(:root)
if ENV['GENTLE_ROOT'] == nil
  if !([nil, "usage", "help"].include?(command))
    STDERR.puts("Could not find GENTLE_ROOT.  Aborting.")
    exit
  end
end

local_vendor_path = GentleREST::Locator.locate(:vendor)

init_script = GentleREST::Locator.locate(:init_script)
if init_script == nil
  STDERR.puts("Could not locate init script.")
  exit
end

config_file = File.read(init_script)

# If the config file contained a #\ line, add those parameters to the
# arguments array.
if config_file[/^#\\(.*)/]
  begin
    opts.parse!($1.split(/\s+/))
  rescue OptionParser::InvalidOption => e
    STDERR.puts("While parsing options in 'config.ru':")
    abort(e.message)
  end
end

begin
  opts.parse!(ARGV)
rescue OptionParser::InvalidOption => e
  abort(e.message)
end

if !ARGV.empty?
  puts "Invalid options:"
  puts ARGV.join(" ")
  puts
  puts "For help using this application: gentlerest help"
  exit
end

# By default, the GENTLE_ROOT/templates directory is where you put your
# templates.  If it exists, we want to add it to the $TEMPLATE_PATH.
# Other paths may be added manually.
template_path = GentleREST::Locator.locate(:templates)
$TEMPLATE_PATH.unshift(template_path) if template_path != nil
$TEMPLATE_PATH << File.expand_path(".")

start_proc = lambda do
  $0 = "gentlerest | idle"
  inner_app = eval(
    "Rack::Builder.new {( " + config_file + "\n )}.to_app",
    nil, init_script
  )

  case server
  when nil
    # Guess.
    if ENV.include?("PHP_FCGI_CHILDREN")
      server = Rack::Handler::FastCGI
    elsif ENV.include?("REQUEST_METHOD")
      server = Rack::Handler::CGI
    else
      begin
        server = Rack::Handler::Mongrel
      rescue LoadError => e
        server = Rack::Handler::WEBrick
      end
    end
  when "mongrel"
    server = Rack::Handler::Mongrel
  when "webrick"
    server = Rack::Handler::WEBrick
  when "cgi"
    server = Rack::Handler::CGI
  when "fastcgi"
    server = Rack::Handler::FastCGI
  else
    server = Rack::Handler.const_get(server.capitalize)
  end

  if $DEBUG
    require "pp"
    puts "server:"
    pp server
  end

  case ENV["ENVIRONMENT"]
  when "development"
    app = Rack::Builder.new {
      use Rack::CommonLogger, STDERR unless server.name =~ /CGI/
      use Rack::ShowExceptions
      use Rack::Lint
      run inner_app
    }.to_app
  when "deployment", "production"
    app = Rack::Builder.new {
      use Rack::CommonLogger, STDERR unless server.name =~ /CGI/
      run inner_app
    }.to_app
  else
    app = inner_app
  end

  if $DEBUG
    require "pp"
    puts "app:"
    pp app
    puts "inner_app:"
    pp inner_app
  end

  puts (
    "Starting #{server} " +
    "at #{options[:Host]} on port #{options[:Port]}."
  )
  server.run app, options
end

profile_proc = lambda do
  begin
    require "ruby-prof"
  rescue LoadError
    abort("The ruby-prof gem is not installed.  Cannot profile.")
  end
  
  $PROFILE = true
  puts "Profiling enabled."
  start_proc.call
end

case command
when nil, "usage", "help", "-h", "--help"
  puts opts
when "profile"
  profile_proc.call
when "start"
  start_proc.call
else
  puts "Invalid command: #{command.inspect}"
  puts
  puts "For help using this application: gentlerest help"
end
